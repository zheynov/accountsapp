openapi: 3.0.1
info:
  title: Auth API
  version: 1.0.0

paths:
  /api/auth/register:
    post:
      tags: [ Auth ]
      summary: new user registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationRequest'
      responses:
        '200':
          description: registration success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
  /api/auth/login:
    post:
      tags: [ Auth ]
      summary: login by email or phone number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
      responses:
        '200':
          description: Authentication success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
  /api/user/email:
    post:
      tags: [ User ]
      summary: Add email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailRequest'
      responses:
        '200':
          description: Email added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailResponse'
    put:
      tags: [ User ]
      summary: Update email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEmailRequest'
      responses:
        '200':
          description: Email updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailResponse'
    delete:
      tags: [ User ]
      summary: Delete email
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Email deleted

  /api/user/phone:
    post:
      tags: [ User ]
      summary: Add phone
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneRequest'
      responses:
        '200':
          description: Phone added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneResponse'
    put:
      tags: [ User ]
      summary: Update phone
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePhoneRequest'
      responses:
        '200':
          description: Phone updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneResponse'
    delete:
      tags: [ User ]
      summary: Delete phone
      parameters:
        - name: phone
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Phone deleted

  /api/user/search:
    get:
      tags: [ User ]
      summary: Users search
      parameters:
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: phone
          schema:
            type: string
        - in: query
          name: email
          schema:
            type: string
        - in: query
          name: dateOfBirth
          schema:
            type: string
            format: date-time
        - in: query
          name: page
          schema:
            type: integer
            default: 0
        - in: query
          name: size
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageUserSearchResponse'

  /accounts/transfer:
    post:
      tags:
        - Account
      summary: Transfer money to another user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoneyTransferRequest'
      responses:
        '200':
          description: Transfer successful
        '400':
          description: Validation error
        '404':
          description: Account not found
      security:
        - bearerAuth: [ ]


components:
  schemas:
    AuthenticationRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        phone:
          type: string
          pattern: '^79\d{9}$'
          example: "79207865432"
        password:
          type: string
          format: password
          example: "password"
      required: [ password ]
      description:
    RegistrationRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        password:
          type: string
          minLength: 6
        email:
          type: string
          format: email
        phone:
          type: string
          pattern: '^79\d{9}$'
        dateOfBirth:
          type: string
          format: date-time
          example: "22.11.2025"
          description: Дата рождения в формате dd.MM.yyyy
      required: [ name, password, dateOfBirth ]
      description:
    AuthenticationResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      required: [ token ]

    EmailRequest:
      type: object
      properties:
        email:
          type: string
      required: [ email ]
    UpdateEmailRequest:
      type: object
      properties:
        oldEmail:
          type: string
        newEmail:
          type: string
      required: [ oldEmail, newEmail ]
    EmailResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
      required: [ id, email ]

    PhoneRequest:
      type: object
      properties:
        phone:
          type: string
      required: [ phone ]
    UpdatePhoneRequest:
      type: object
      properties:
        oldPhone:
          type: string
        newPhone:
          type: string
      required: [ oldPhone, newPhone ]
    PhoneResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        phone:
          type: string
      required: [ id, phone ]

    UserSearchResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        dateOfBirth:
          type: string
          format: date-time
        emails:
          type: array
          items:
            type: string
        phones:
          type: array
          items:
            type: string
    PageUserSearchResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserSearchResponse'
        page:
          type: integer
        size:
          type: integer
        totalElements:
          type: integer
        totalPages:
          type: integer

    MoneyTransferRequest:
      type: object
      required:
        - toUserId
        - amount
      properties:
        toUserId:
          type: integer
          format: int64
          minimum: 1
          nullable: false
        amount:
          type: number
          format: decimal
          example: 100.00
          minimum: 0.01
          multipleOf: 0.01