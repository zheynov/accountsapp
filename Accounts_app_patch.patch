Subject: [PATCH] Accounts app patch
---
Index: src/main/java/by/redlaw/acocuntsapp/config/jwt/AuthenticationProviderConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/redlaw/acocuntsapp/config/jwt/AuthenticationProviderConfig.java b/src/main/java/by/redlaw/acocuntsapp/config/jwt/AuthenticationProviderConfig.java
new file mode 100644
--- /dev/null	(date 1747222997430)
+++ b/src/main/java/by/redlaw/acocuntsapp/config/jwt/AuthenticationProviderConfig.java	(date 1747222997430)
@@ -0,0 +1,25 @@
+package by.redlaw.acocuntsapp.config.jwt;
+
+import by.redlaw.acocuntsapp.service.UserDetailsService;
+import lombok.RequiredArgsConstructor;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.security.authentication.AuthenticationProvider;
+import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
+
+@Configuration
+@RequiredArgsConstructor
+public class AuthenticationProviderConfig {
+
+    private final UserDetailsService userDetailsService;
+    private final PasswordEncoderConfig passwordEncoderConfig;
+
+    @Bean
+    public AuthenticationProvider authenticationProvider() {
+        final DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();
+        authenticationProvider.setUserDetailsService(userDetailsService);
+        authenticationProvider.setPasswordEncoder(passwordEncoderConfig.getPasswordEncoder());
+
+        return authenticationProvider;
+    }
+}
Index: http/user_data.http
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/http/user_data.http b/http/user_data.http
new file mode 100644
--- /dev/null	(date 1747518060145)
+++ b/http/user_data.http	(date 1747518060145)
@@ -0,0 +1,46 @@
+### Добавить email
+POST http://localhost:8080/api/user/email
+Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwiaWF0IjoxNzQ3MTcwODg4LCJleHAiOjE3NDcyMDY4ODh9.rd8HsKlb6yuFZ2fqZBaGKKA1MWxpaN3I4_SlXcmoNwg
+Content-Type: application/json
+
+{
+  "email": "updated.ivan.petrov1@example.com"
+}
+
+### Изменить email
+PUT http://localhost:8080/api/user/email
+Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwiaWF0IjoxNzQ3MTU5MzQzLCJleHAiOjE3NDcxOTUzNDN9.h1SnCVKz73UTpxP3Q7K5ErFFiwov0QC52gD2meCA1-8
+Content-Type: application/json
+
+{
+  "oldEmail": "ivan.petrov@example.com",
+  "newEmail": "updated.ivan.petrov@example.com"
+}
+
+### Удалить email
+DELETE http://localhost:8080/api/user/email?email=ivan.petrov@example.com
+Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwiaWF0IjoxNzQ3MTcxMzQxLCJleHAiOjE3NDcyMDczNDF9.DCeW25dTG2qqubFWuAIdUsKIU7felNUUNyw_4juQ6m4
+
+
+### Добавить телефон
+POST http://localhost:8080/api/user/phone
+Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwiaWF0IjoxNzQ3NTE3OTkzLCJleHAiOjE3NDc1NTM5OTN9.SZaIBaDHNb5fy9z3yE7Mc1X1gUd4xq_MlyRO3u-Kb5o
+Content-Type: application/json
+
+{
+  "phone": "79207654321"
+}
+
+### Изменить телефон
+PUT http://localhost:8080/api/user/phone
+Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwiaWF0IjoxNzQ3NTE3OTkzLCJleHAiOjE3NDc1NTM5OTN9.SZaIBaDHNb5fy9z3yE7Mc1X1gUd4xq_MlyRO3u-Kb5o
+Content-Type: application/json
+
+{
+  "oldPhone": "79207654321",
+  "newPhone": "79206543210"
+}
+
+### Удалить телефон
+DELETE http://localhost:8080/api/user/phone?phone=79201111111
+Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwiaWF0IjoxNzQ3NTE3OTkzLCJleHAiOjE3NDc1NTM5OTN9.SZaIBaDHNb5fy9z3yE7Mc1X1gUd4xq_MlyRO3u-Kb5o
\ No newline at end of file
Index: src/main/java/by/redlaw/acocuntsapp/exception/JwtAuthenticationEntryPoint.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/redlaw/acocuntsapp/exception/JwtAuthenticationEntryPoint.java b/src/main/java/by/redlaw/acocuntsapp/exception/JwtAuthenticationEntryPoint.java
new file mode 100644
--- /dev/null	(date 1747222997436)
+++ b/src/main/java/by/redlaw/acocuntsapp/exception/JwtAuthenticationEntryPoint.java	(date 1747222997436)
@@ -0,0 +1,52 @@
+package by.redlaw.acocuntsapp.exception;
+
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import jakarta.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletResponse;
+import lombok.RequiredArgsConstructor;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.MediaType;
+import org.springframework.security.authentication.BadCredentialsException;
+import org.springframework.security.authentication.InsufficientAuthenticationException;
+import org.springframework.security.core.AuthenticationException;
+import org.springframework.security.web.AuthenticationEntryPoint;
+import org.springframework.stereotype.Component;
+
+import java.io.IOException;
+import java.time.Instant;
+import java.util.Map;
+
+/**
+ * To handle unauthorized access attempts to the application.
+ */
+@Component
+@RequiredArgsConstructor
+public class JwtAuthenticationEntryPoint implements AuthenticationEntryPoint {
+    private final ObjectMapper objectMapper;
+
+    @Override
+    public void commence(HttpServletRequest request, HttpServletResponse response,
+                         AuthenticationException authException) throws IOException {
+        int status = HttpServletResponse.SC_UNAUTHORIZED;
+
+        if (authException instanceof InsufficientAuthenticationException) {
+            status = HttpServletResponse.SC_FORBIDDEN;
+        } else if (authException instanceof BadCredentialsException) {
+            status = HttpServletResponse.SC_UNAUTHORIZED;
+        }
+
+        response.setStatus(status);
+        response.setContentType(MediaType.APPLICATION_JSON_VALUE);
+
+        Map<String, Object> errorBody = Map.of(
+                "status", status,
+                "error", HttpStatus.valueOf(status).getReasonPhrase(),
+                "message", "Authentication is required or invalid",
+                "timestamp", Instant.now().toString()
+        );
+
+        objectMapper.writeValue(response.getOutputStream(), errorBody);
+    }
+}
+
Index: src/main/java/by/redlaw/acocuntsapp/config/jwt/PasswordEncoderConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/redlaw/acocuntsapp/config/jwt/PasswordEncoderConfig.java b/src/main/java/by/redlaw/acocuntsapp/config/jwt/PasswordEncoderConfig.java
new file mode 100644
--- /dev/null	(date 1747065134190)
+++ b/src/main/java/by/redlaw/acocuntsapp/config/jwt/PasswordEncoderConfig.java	(date 1747065134190)
@@ -0,0 +1,15 @@
+package by.redlaw.acocuntsapp.config.jwt;
+
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
+import org.springframework.security.crypto.password.PasswordEncoder;
+
+@Configuration
+public class PasswordEncoderConfig {
+
+    @Bean
+    public PasswordEncoder getPasswordEncoder() {
+        return new BCryptPasswordEncoder();
+    }
+}
Index: src/main/java/by/redlaw/acocuntsapp/db/repository/AccountRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/redlaw/acocuntsapp/db/repository/AccountRepository.java b/src/main/java/by/redlaw/acocuntsapp/db/repository/AccountRepository.java
new file mode 100644
--- /dev/null	(date 1747388854016)
+++ b/src/main/java/by/redlaw/acocuntsapp/db/repository/AccountRepository.java	(date 1747388854016)
@@ -0,0 +1,32 @@
+package by.redlaw.acocuntsapp.db.repository;
+
+import by.redlaw.acocuntsapp.db.entity.Account;
+import jakarta.persistence.LockModeType;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Lock;
+import org.springframework.data.jpa.repository.Modifying;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
+
+import java.util.Optional;
+
+public interface AccountRepository extends JpaRepository<Account, Long> {
+
+    @Modifying
+    @Query(value = """
+                UPDATE Account a
+                SET a.balance =
+                    CASE
+                        WHEN a.balance * 1.1 > a.initialBalanceLimit
+                        THEN a.initialBalanceLimit
+                        ELSE a.balance * 1.1
+                    END
+                WHERE a.balance < a.initialBalanceLimit
+            """)
+    void increaseAllUsersBalances();
+
+    @Lock(LockModeType.PESSIMISTIC_WRITE)
+    @Query("SELECT a FROM Account a WHERE a.user.id = :userId")
+    Optional<Account> findByUserIdForUpdate(@Param("userId") Long userId);
+    // есть вероятность эксепшнов под высокой нагрузкой, в этом случае можно было бы продумать механизм ретрая/таймаутов
+}
\ No newline at end of file
Index: src/main/java/by/redlaw/acocuntsapp/config/jwt/SecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/redlaw/acocuntsapp/config/jwt/SecurityConfig.java b/src/main/java/by/redlaw/acocuntsapp/config/jwt/SecurityConfig.java
new file mode 100644
--- /dev/null	(date 1747223102292)
+++ b/src/main/java/by/redlaw/acocuntsapp/config/jwt/SecurityConfig.java	(date 1747223102292)
@@ -0,0 +1,55 @@
+package by.redlaw.acocuntsapp.config.jwt;
+
+
+import by.redlaw.acocuntsapp.exception.JwtAuthenticationEntryPoint;
+import by.redlaw.acocuntsapp.filter.JwtAuthFilter;
+import lombok.RequiredArgsConstructor;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.security.authentication.AuthenticationManager;
+import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
+import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
+import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
+import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
+import org.springframework.security.config.http.SessionCreationPolicy;
+import org.springframework.security.web.SecurityFilterChain;
+import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
+
+@EnableMethodSecurity
+@EnableWebSecurity
+@Configuration
+@RequiredArgsConstructor
+public class SecurityConfig {
+    private final JwtAuthFilter jwtAuthFilter;
+    private final AuthenticationProviderConfig authenticationProvider;
+    private final JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint;
+
+    @Bean
+    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
+        http.authorizeHttpRequests((requests) -> requests
+                        .requestMatchers(
+                                "/v3/api-docs/**",
+                                "/swagger-ui/**",
+                                "/swagger-ui.html",
+                                "/api/auth/**",
+                                "/api/user/search")
+                        .permitAll()
+                        .requestMatchers("/api/user/**").authenticated()
+                        .anyRequest()
+                        .authenticated())
+                .csrf(AbstractHttpConfigurer::disable)
+                .exceptionHandling((exceptionHandling) ->
+                        exceptionHandling.authenticationEntryPoint(jwtAuthenticationEntryPoint))
+                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
+                .authenticationProvider(authenticationProvider.authenticationProvider())
+                .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class);
+        return http.build();
+    }
+
+
+    @Bean
+    public AuthenticationManager authenticationManager(AuthenticationConfiguration builder) throws Exception {
+        return builder.getAuthenticationManager();
+    }
+}
Index: src/main/java/by/redlaw/acocuntsapp/db/repository/spec/UserSpecifications.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/redlaw/acocuntsapp/db/repository/spec/UserSpecifications.java b/src/main/java/by/redlaw/acocuntsapp/db/repository/spec/UserSpecifications.java
new file mode 100644
--- /dev/null	(date 1747226008678)
+++ b/src/main/java/by/redlaw/acocuntsapp/db/repository/spec/UserSpecifications.java	(date 1747226008678)
@@ -0,0 +1,39 @@
+package by.redlaw.acocuntsapp.db.repository.spec;
+
+import by.redlaw.acocuntsapp.db.entity.User;
+import jakarta.persistence.criteria.Join;
+import jakarta.persistence.criteria.Predicate;
+import org.springframework.data.jpa.domain.Specification;
+
+import java.time.LocalDate;
+
+public class UserSpecifications {
+
+    public static Specification<User> withFilters(String name, LocalDate dateOfBirth, String email, String phone) {
+        return (root, query, cb) -> {
+            query.distinct(true);
+
+            Predicate predicate = cb.conjunction();
+
+            if (name != null && !name.isBlank()) {
+                predicate = cb.and(predicate, cb.like(root.get("name"), name + "%"));
+            }
+
+            if (dateOfBirth != null) {
+                predicate = cb.and(predicate, cb.greaterThan(root.get("dateOfBirth"), dateOfBirth));
+            }
+
+            if (email != null && !email.isBlank()) {
+                Join<Object, Object> emailsJoin = root.join("emails");
+                predicate = cb.and(predicate, cb.equal(emailsJoin.get("email"), email));
+            }
+
+            if (phone != null && !phone.isBlank()) {
+                Join<Object, Object> phonesJoin = root.join("phones");
+                predicate = cb.and(predicate, cb.equal(phonesJoin.get("phone"), phone));
+            }
+
+            return predicate;
+        };
+    }
+}
Index: src/main/java/by/redlaw/acocuntsapp/db/entity/Account.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/redlaw/acocuntsapp/db/entity/Account.java b/src/main/java/by/redlaw/acocuntsapp/db/entity/Account.java
new file mode 100644
--- /dev/null	(date 1747235375020)
+++ b/src/main/java/by/redlaw/acocuntsapp/db/entity/Account.java	(date 1747235375020)
@@ -0,0 +1,40 @@
+package by.redlaw.acocuntsapp.db.entity;
+
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.math.BigDecimal;
+
+@Entity
+@Table(name = "account")
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@Builder
+public class Account {
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+
+    @OneToOne(optional = false)
+    @JoinColumn(name = "user_id", nullable = false, unique = true)
+    private User user;
+
+    @Column(nullable = false, precision = 19, scale = 2)
+    private BigDecimal balance;
+
+    @Column(name = "initial_balance_limit", nullable = false, precision = 19, scale = 2)
+    private BigDecimal initialBalanceLimit;
+
+    @PrePersist
+    @PreUpdate
+    private void validateBalance() {
+        if (balance.compareTo(BigDecimal.ZERO) < 0) {
+            throw new IllegalArgumentException("Balance cannot be negative");
+        }
+    }
+}
\ No newline at end of file
Index: src/main/java/by/redlaw/acocuntsapp/service/AccountService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/redlaw/acocuntsapp/service/AccountService.java b/src/main/java/by/redlaw/acocuntsapp/service/AccountService.java
new file mode 100644
--- /dev/null	(date 1747517899129)
+++ b/src/main/java/by/redlaw/acocuntsapp/service/AccountService.java	(date 1747517899129)
@@ -0,0 +1,62 @@
+package by.redlaw.acocuntsapp.service;
+
+import by.redlaw.acocuntsapp.db.entity.Account;
+import by.redlaw.acocuntsapp.db.repository.AccountRepository;
+import jakarta.persistence.EntityNotFoundException;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.scheduling.annotation.Scheduled;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Isolation;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.math.BigDecimal;
+
+@Slf4j
+@Service
+@RequiredArgsConstructor
+public class AccountService {
+    private final AccountRepository accountRepository;
+
+    public void save(Account account) {
+        accountRepository.save(account);
+    }
+
+    @Transactional
+    @Scheduled(fixedRate = 30000)
+    public void increaseAllUsersBalances() {
+        accountRepository.increaseAllUsersBalances();
+        log.info("All accounts are rebalanced");
+    }
+
+    @Transactional(isolation = Isolation.READ_COMMITTED)
+    public void transferMoney(Long fromUserId, Long toUserId, BigDecimal amount) {
+        if (amount.compareTo(BigDecimal.ZERO) <= 0) {
+            throw new IllegalArgumentException("Amount must be greater than zero");
+        }
+        if (fromUserId.equals(toUserId)) {
+            throw new IllegalArgumentException("Cannot transfer to yourself");
+        }
+
+        Account from = (fromUserId < toUserId) ? lockAccount(fromUserId) : lockAccount(toUserId);
+        Account to = (fromUserId < toUserId) ? lockAccount(toUserId) : lockAccount(fromUserId);
+
+        if (from.getBalance().compareTo(amount) < 0) {
+            throw new IllegalArgumentException("Insufficient balance");
+        }
+
+        from.setBalance(from.getBalance().subtract(amount));
+        to.setBalance(to.getBalance().add(amount));
+
+        accountRepository.save(from);
+        accountRepository.save(to);
+
+        log.info("Transfer: {} from userId={} to userId={}", amount, fromUserId, toUserId);
+    }
+
+
+    private Account lockAccount(Long userId) {
+        return accountRepository.findByUserIdForUpdate(userId)
+                .orElseThrow(() -> new EntityNotFoundException("Account not found for userId: " + userId));
+    }
+}
Index: http/auth.http
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/http/auth.http b/http/auth.http
new file mode 100644
--- /dev/null	(date 1747517718085)
+++ b/http/auth.http	(date 1747517718085)
@@ -0,0 +1,28 @@
+### Регистрация
+POST http://localhost:8080/api/auth/register
+Content-Type: application/json
+
+{
+  "name": "Иван1 Петров",
+  "password": "password123",
+  "email": "ivan1.petrov@example.com",
+  "dateOfBirth": "1990-01-01T00:00:00"
+}
+
+### Аутентификация по email
+POST http://localhost:8080/api/auth/login
+Content-Type: application/json
+
+{
+  "email": "ivan.petrov@example.com",
+  "password": "password123"
+}
+
+### Аутентификация по телефону
+POST http://localhost:8080/api/auth/login
+Content-Type: application/json
+
+{
+  "phone": "79201111111",
+  "password": "password123"
+}
\ No newline at end of file
Index: Dockerfile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Dockerfile b/Dockerfile
new file mode 100644
--- /dev/null	(date 1747070355129)
+++ b/Dockerfile	(date 1747070355129)
@@ -0,0 +1,12 @@
+# Stage 1: build
+FROM maven:3.9.9-amazoncorretto-21-alpine AS build
+WORKDIR /app
+COPY pom.xml .
+COPY src ./src
+RUN mvn clean package -DskipTests
+
+# Stage 2: runtime
+FROM eclipse-temurin:17-jre-alpine
+WORKDIR /app
+COPY --from=build /app/target/*.jar app.jar
+ENTRYPOINT ["java","-jar","/app/app.jar"]
\ No newline at end of file
Index: src/main/resources/accounts-app-api.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/accounts-app-api.yml b/src/main/resources/accounts-app-api.yml
new file mode 100644
--- /dev/null	(date 1747517676741)
+++ b/src/main/resources/accounts-app-api.yml	(date 1747517676741)
@@ -0,0 +1,344 @@
+openapi: 3.0.1
+info:
+  title: Auth API
+  version: 1.0.0
+
+paths:
+  /api/auth/register:
+    post:
+      tags: [ Auth ]
+      summary: new user registration
+      requestBody:
+        required: true
+        content:
+          application/json:
+            schema:
+              $ref: '#/components/schemas/RegistrationRequest'
+      responses:
+        '200':
+          description: registration success
+          content:
+            application/json:
+              schema:
+                $ref: '#/components/schemas/AuthenticationResponse'
+  /api/auth/login:
+    post:
+      tags: [ Auth ]
+      summary: login by email or phone number
+      requestBody:
+        required: true
+        content:
+          application/json:
+            schema:
+              $ref: '#/components/schemas/AuthenticationRequest'
+      responses:
+        '200':
+          description: Authentication success
+          content:
+            application/json:
+              schema:
+                $ref: '#/components/schemas/AuthenticationResponse'
+  /api/user/email:
+    post:
+      tags: [ User ]
+      summary: Add email
+      requestBody:
+        required: true
+        content:
+          application/json:
+            schema:
+              $ref: '#/components/schemas/EmailRequest'
+      responses:
+        '200':
+          description: Email added
+          content:
+            application/json:
+              schema:
+                $ref: '#/components/schemas/EmailResponse'
+    put:
+      tags: [ User ]
+      summary: Update email
+      requestBody:
+        required: true
+        content:
+          application/json:
+            schema:
+              $ref: '#/components/schemas/UpdateEmailRequest'
+      responses:
+        '200':
+          description: Email updated
+          content:
+            application/json:
+              schema:
+                $ref: '#/components/schemas/EmailResponse'
+    delete:
+      tags: [ User ]
+      summary: Delete email
+      parameters:
+        - name: email
+          in: query
+          required: true
+          schema:
+            type: string
+      responses:
+        '200':
+          description: Email deleted
+
+  /api/user/phone:
+    post:
+      tags: [ User ]
+      summary: Add phone
+      requestBody:
+        required: true
+        content:
+          application/json:
+            schema:
+              $ref: '#/components/schemas/PhoneRequest'
+      responses:
+        '200':
+          description: Phone added
+          content:
+            application/json:
+              schema:
+                $ref: '#/components/schemas/PhoneResponse'
+    put:
+      tags: [ User ]
+      summary: Update phone
+      requestBody:
+        required: true
+        content:
+          application/json:
+            schema:
+              $ref: '#/components/schemas/UpdatePhoneRequest'
+      responses:
+        '200':
+          description: Phone updated
+          content:
+            application/json:
+              schema:
+                $ref: '#/components/schemas/PhoneResponse'
+    delete:
+      tags: [ User ]
+      summary: Delete phone
+      parameters:
+        - name: phone
+          in: query
+          required: true
+          schema:
+            type: string
+      responses:
+        '200':
+          description: Phone deleted
+
+  /api/user/search:
+    get:
+      tags: [ User ]
+      summary: Users search
+      parameters:
+        - in: query
+          name: name
+          schema:
+            type: string
+        - in: query
+          name: phone
+          schema:
+            type: string
+        - in: query
+          name: email
+          schema:
+            type: string
+        - in: query
+          name: dateOfBirth
+          schema:
+            type: string
+            format: date-time
+        - in: query
+          name: page
+          schema:
+            type: integer
+            default: 0
+        - in: query
+          name: size
+          schema:
+            type: integer
+            default: 20
+      responses:
+        '200':
+          description:
+          content:
+            application/json:
+              schema:
+                $ref: '#/components/schemas/PageUserSearchResponse'
+
+  /accounts/transfer:
+    post:
+      tags:
+        - Account
+      summary: Transfer money to another user
+      requestBody:
+        required: true
+        content:
+          application/json:
+            schema:
+              $ref: '#/components/schemas/MoneyTransferRequest'
+      responses:
+        '200':
+          description: Transfer successful
+        '400':
+          description: Validation error
+        '404':
+          description: Account not found
+      security:
+        - bearerAuth: [ ]
+
+
+components:
+  schemas:
+    AuthenticationRequest:
+      type: object
+      properties:
+        email:
+          type: string
+          format: email
+          example: "user@example.com"
+        phone:
+          type: string
+          pattern: '^79\d{9}$'
+          example: "79207865432"
+        password:
+          type: string
+          format: password
+          example: "password"
+      required: [ password ]
+      description:
+    RegistrationRequest:
+      type: object
+      properties:
+        name:
+          type: string
+          minLength: 1
+          maxLength: 100
+        password:
+          type: string
+          minLength: 6
+        email:
+          type: string
+          format: email
+        phone:
+          type: string
+          pattern: '^79\d{9}$'
+        dateOfBirth:
+          type: string
+          format: date-time
+          example: "22.11.2025"
+          description: Дата рождения в формате dd.MM.yyyy
+      required: [ name, password, dateOfBirth ]
+      description:
+    AuthenticationResponse:
+      type: object
+      properties:
+        token:
+          type: string
+          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
+      required: [ token ]
+
+    EmailRequest:
+      type: object
+      properties:
+        email:
+          type: string
+      required: [ email ]
+    UpdateEmailRequest:
+      type: object
+      properties:
+        oldEmail:
+          type: string
+        newEmail:
+          type: string
+      required: [ oldEmail, newEmail ]
+    EmailResponse:
+      type: object
+      properties:
+        id:
+          type: integer
+          format: int64
+        email:
+          type: string
+      required: [ id, email ]
+
+    PhoneRequest:
+      type: object
+      properties:
+        phone:
+          type: string
+      required: [ phone ]
+    UpdatePhoneRequest:
+      type: object
+      properties:
+        oldPhone:
+          type: string
+        newPhone:
+          type: string
+      required: [ oldPhone, newPhone ]
+    PhoneResponse:
+      type: object
+      properties:
+        id:
+          type: integer
+          format: int64
+        phone:
+          type: string
+      required: [ id, phone ]
+
+    UserSearchResponse:
+      type: object
+      properties:
+        id:
+          type: integer
+          format: int64
+        name:
+          type: string
+        dateOfBirth:
+          type: string
+          format: date-time
+        emails:
+          type: array
+          items:
+            type: string
+        phones:
+          type: array
+          items:
+            type: string
+    PageUserSearchResponse:
+      type: object
+      properties:
+        content:
+          type: array
+          items:
+            $ref: '#/components/schemas/UserSearchResponse'
+        page:
+          type: integer
+        size:
+          type: integer
+        totalElements:
+          type: integer
+        totalPages:
+          type: integer
+
+    MoneyTransferRequest:
+      type: object
+      required:
+        - toUserId
+        - amount
+      properties:
+        toUserId:
+          type: integer
+          format: int64
+          minimum: 1
+          nullable: false
+        amount:
+          type: number
+          format: decimal
+          example: 100.00
+          minimum: 0.01
+          multipleOf: 0.01
\ No newline at end of file
Index: src/main/resources/db/migration/V2__insert_test_users.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/db/migration/V2__insert_test_users.sql b/src/main/resources/db/migration/V2__insert_test_users.sql
new file mode 100644
--- /dev/null	(date 1747517693338)
+++ b/src/main/resources/db/migration/V2__insert_test_users.sql	(date 1747517693338)
@@ -0,0 +1,55 @@
+-- users
+INSERT INTO users ( name, date_of_birth, password, role, enabled)
+VALUES
+  ('Ivan Petrov', TO_DATE('22.11.1990', 'DD.MM.YYYY'), '$2a$10$Qui803HZ2kadBF59Lg5HOOP0zxt0yecFMm6n6J5XN1pPI02hO70xu', 'USER', true),
+  ('Anna Ivanova', TO_DATE('15.05.1985', 'DD.MM.YYYY'), '$2a$10$Qui803HZ2kadBF59Lg5HOOP0zxt0yecFMm6n6J5XN1pPI02hO70xu', 'USER', true),
+  ('Oleg Smirnov', TO_DATE('01.01.1992', 'DD.MM.YYYY'), '$2a$10$Qui803HZ2kadBF59Lg5HOOP0zxt0yecFMm6n6J5XN1pPI02hO70xu', 'USER', true),
+  ('Daria Sokolova', TO_DATE('12.12.1980', 'DD.MM.YYYY'), '$2a$10$Qui803HZ2kadBF59Lg5HOOP0zxt0yecFMm6n6J5XN1pPI02hO70xu', 'USER', true),
+  ('Maxim Orlov', TO_DATE('30.06.1995', 'DD.MM.YYYY'), '$2a$10$Qui803HZ2kadBF59Lg5HOOP0zxt0yecFMm6n6J5XN1pPI02hO70xu', 'USER', true),
+  ('Elena Volkova', TO_DATE('25.03.1988', 'DD.MM.YYYY'), '$2a$10$Qui803HZ2kadBF59Lg5HOOP0zxt0yecFMm6n6J5XN1pPI02hO70xu', 'USER', true),
+  ('Artem Fedorov', TO_DATE('05.09.1990', 'DD.MM.YYYY'), '$2a$10$Qui803HZ2kadBF59Lg5HOOP0zxt0yecFMm6n6J5XN1pPI02hO70xu', 'USER', true),
+  ('Maria Belova', TO_DATE('28.08.1993', 'DD.MM.YYYY'), '$2a$10$Qui803HZ2kadBF59Lg5HOOP0zxt0yecFMm6n6J5XN1pPI02hO70xu', 'USER', true),
+  ('Andrey Kiselev', TO_DATE('07.07.1986', 'DD.MM.YYYY'), '$2a$10$Qui803HZ2kadBF59Lg5HOOP0zxt0yecFMm6n6J5XN1pPI02hO70xu', 'USER', true),
+  ('Natalia Lebedeva', TO_DATE('19.04.1989', 'DD.MM.YYYY'), '$2a$10$Qui803HZ2kadBF59Lg5HOOP0zxt0yecFMm6n6J5XN1pPI02hO70xu0', 'USER', true);
+
+-- users emails
+INSERT INTO email_data (user_id, email)
+VALUES
+  (1, 'ivan.petrov@example.com'),
+  (2, 'anna.ivanova@example.com'),
+  (3, 'oleg.sidorov@example.com'),
+  (4, 'elena.smirnova@example.com'),
+  (5, 'dmitry.orlov@example.com'),
+  (6, 'olga.nikolaeva@example.com'),
+  (7, 'sergey.pavlov@example.com'),
+  (8, 'irina.volkova@example.com'),
+  (9, 'maxim.egorov@example.com'),
+  (10, 'natalia.kuznetsova@example.com');
+
+-- users phones
+INSERT INTO phone_data (user_id, phone)
+VALUES
+  (1, '79201111111'),
+  (2, '79202222222'),
+  (3, '79203333333'),
+  (4, '79204444444'),
+  (5, '79205555555'),
+  (6, '79206666666'),
+  (7, '79207777777'),
+  (8, '79208888888'),
+  (9, '79209999999'),
+  (10, '79201010101');
+
+-- users accounts
+INSERT INTO account (user_id, balance, initial_balance_limit)
+VALUES
+  (1, 100.00, 207.00),
+  (2, 150.00, 310.50),
+  (3, 200.00, 414.00),
+  (4, 50.00, 103.50),
+  (5, 120.00, 248.40),
+  (6, 300.00, 621.00),
+  (7, 80.00, 165.60),
+  (8, 400.00, 828.00),
+  (9, 60.00, 124.20),
+  (10, 500.00, 1035.00);
\ No newline at end of file
Index: src/main/java/by/redlaw/acocuntsapp/controller/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/redlaw/acocuntsapp/controller/UserController.java b/src/main/java/by/redlaw/acocuntsapp/controller/UserController.java
new file mode 100644
--- /dev/null	(date 1747486335934)
+++ b/src/main/java/by/redlaw/acocuntsapp/controller/UserController.java	(date 1747486335934)
@@ -0,0 +1,95 @@
+package by.redlaw.acocuntsapp.controller;
+
+import by.redlaw.accountsapp.api.UserApi;
+import by.redlaw.accountsapp.dto.*;
+import by.redlaw.acocuntsapp.db.entity.EmailData;
+import by.redlaw.acocuntsapp.db.entity.PhoneData;
+import by.redlaw.acocuntsapp.service.AuthenticationService;
+import by.redlaw.acocuntsapp.service.UserDetailsService;
+import jakarta.validation.Valid;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.data.domain.Page;
+import org.springframework.data.domain.PageRequest;
+import org.springframework.data.domain.Pageable;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.RestController;
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.util.Optional;
+
+@Slf4j
+@RestController
+@RequiredArgsConstructor
+public class UserController implements UserApi {
+
+    private final UserDetailsService userDetailsService;
+    private final AuthenticationService authenticationService;
+
+    @Override
+    public ResponseEntity<PageUserSearchResponseDto> apiUserSearchGet(String name, String phone, String email, LocalDateTime dateOfBirth, Integer page, Integer size) {
+        Pageable pageable = PageRequest.of(
+                Optional.ofNullable(page).orElse(0),
+                Optional.ofNullable(size).orElse(20)
+        );
+
+        LocalDate localDate = dateOfBirth != null ? dateOfBirth.toLocalDate() : null;
+        Page<UserSearchResponseDto> result = userDetailsService.searchUsers(name, phone, email, localDate, pageable);
+
+        PageUserSearchResponseDto response = new PageUserSearchResponseDto();
+        response.setContent(result.getContent());
+        response.setPage(result.getNumber());
+        response.setSize(result.getSize());
+        response.setTotalElements((int) result.getTotalElements());
+        response.setTotalPages(result.getTotalPages());
+
+        log.info("User search with filters: name={}, email={}, phone={}, dateOfBirth={}", name, email, phone, dateOfBirth);
+
+        return ResponseEntity.ok(response);
+    }
+
+    @Override
+    public ResponseEntity<EmailResponseDto> apiUserEmailPost(@Valid EmailRequestDto emailRequestDto) {
+        Long userId = authenticationService.getCurrentUserId();
+        EmailData emailData = userDetailsService.addEmail(userId, emailRequestDto.getEmail());
+        return ResponseEntity.ok(new EmailResponseDto(emailData.getId(), emailData.getEmail()));
+    }
+
+    @Override
+    public ResponseEntity<EmailResponseDto> apiUserEmailPut(@Valid UpdateEmailRequestDto updateEmailRequestDto) {
+        Long userId = authenticationService.getCurrentUserId();
+        EmailData emailData = userDetailsService.updateEmail(userId, updateEmailRequestDto.getOldEmail(), updateEmailRequestDto.getNewEmail());
+        return ResponseEntity.ok(new EmailResponseDto(emailData.getId(), emailData.getEmail()));
+    }
+
+    @Override
+    public ResponseEntity<Void> apiUserEmailDelete(String email) {
+        Long userId = authenticationService.getCurrentUserId();
+        userDetailsService.deleteEmail(userId, email);
+        return ResponseEntity.ok().build();
+    }
+
+    @Override
+    public ResponseEntity<PhoneResponseDto> apiUserPhonePost(@Valid PhoneRequestDto phoneRequestDto) {
+        Long userId = authenticationService.getCurrentUserId();
+        PhoneData phoneData = userDetailsService.addPhone(userId, phoneRequestDto.getPhone());
+        return ResponseEntity.ok(new PhoneResponseDto(phoneData.getId(), phoneData.getPhone()));
+    }
+
+    @Override
+    public ResponseEntity<PhoneResponseDto> apiUserPhonePut(@Valid UpdatePhoneRequestDto updatePhoneRequestDto) {
+        Long userId = authenticationService.getCurrentUserId();
+        PhoneData phoneData = userDetailsService.updatePhone(userId, updatePhoneRequestDto.getOldPhone(), updatePhoneRequestDto.getNewPhone());
+        return ResponseEntity.ok(new PhoneResponseDto(phoneData.getId(), phoneData.getPhone()));
+    }
+
+    @Override
+    public ResponseEntity<Void> apiUserPhoneDelete(String phone) {
+        Long userId = authenticationService.getCurrentUserId();
+        userDetailsService.deletePhone(userId, phone);
+        return ResponseEntity.ok().build();
+    }
+
+
+}
\ No newline at end of file
Index: docker-compose-db-only.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/docker-compose-db-only.yml b/docker-compose-db-only.yml
new file mode 100644
--- /dev/null	(date 1747131034053)
+++ b/docker-compose-db-only.yml	(date 1747131034053)
@@ -0,0 +1,20 @@
+version: '3.1'
+
+services:
+  be-postgres:
+    container_name: be-postgres
+    image: postgres:13-alpine
+    restart: always
+    ports:
+      - "5432:5432"
+    environment:
+      POSTGRES_USER: postgres
+      POSTGRES_PASSWORD: password
+      POSTGRES_DB: test
+      TZ: 'GMT+3'
+      PGTZ: 'GMT+3'
+    volumes:
+      - be_postgres_data:/var/lib/postgresql/data
+
+volumes:
+  be_postgres_data:
\ No newline at end of file
Index: src/main/resources/logback-spring-custom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/logback-spring-custom.xml b/src/main/resources/logback-spring-custom.xml
new file mode 100644
--- /dev/null	(date 1747516650097)
+++ b/src/main/resources/logback-spring-custom.xml	(date 1747516650097)
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<configuration>
+
+    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
+        <encoder>
+            <pattern>%d{dd-MM-yyyy HH:mm:ss.SSS} [%thread] %-5level %logger{36}.%M - %msg%n</pattern>
+        </encoder>
+    </appender>
+
+    <logger name="org.springframework" level="WARN"/>
+    <logger name="org.hibernate" level="WARN"/>
+    <logger name="by.redlaw" level="DEBUG"/>
+
+    <root level="INFO">
+        <appender-ref ref="stdout"/>
+    </root>
+
+</configuration>
\ No newline at end of file
Index: src/main/java/by/redlaw/acocuntsapp/db/entity/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/redlaw/acocuntsapp/db/entity/User.java b/src/main/java/by/redlaw/acocuntsapp/db/entity/User.java
new file mode 100644
--- /dev/null	(date 1747478554846)
+++ b/src/main/java/by/redlaw/acocuntsapp/db/entity/User.java	(date 1747478554846)
@@ -0,0 +1,89 @@
+package by.redlaw.acocuntsapp.db.entity;
+
+import com.fasterxml.jackson.annotation.JsonFormat;
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import org.springframework.format.annotation.DateTimeFormat;
+import org.springframework.security.core.GrantedAuthority;
+import org.springframework.security.core.authority.SimpleGrantedAuthority;
+import org.springframework.security.core.userdetails.UserDetails;
+
+import java.time.LocalDate;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+@Entity
+@Table(name = "users")
+public class User implements UserDetails {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+
+    @Column(nullable = false, length = 500)
+    private String name;
+
+    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE)
+    @JsonFormat(pattern = "dd.MM.yyyy")
+    @Column(name = "date_of_birth", nullable = false)
+    private LocalDate dateOfBirth;
+
+    @Column(nullable = false, length = 500)
+    private String password;
+
+    @Enumerated(EnumType.STRING)
+    private Role role;
+
+    @Column(nullable = false)
+    private boolean enabled = true;
+
+    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
+    @Builder.Default
+    private List<EmailData> emails = new ArrayList<>();
+
+    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
+    @Builder.Default
+    private List<PhoneData> phones = new ArrayList<>();
+
+    @Override
+    public Collection<? extends GrantedAuthority> getAuthorities() {
+        return List.of(new SimpleGrantedAuthority(role.name()));
+    }
+
+    @Override
+    public String getPassword() {
+        return password;
+    }
+
+    @Override
+    public String getUsername() {
+        return null;
+    }
+
+    @Override
+    public boolean isAccountNonExpired() {
+        return true;
+    }
+
+    @Override
+    public boolean isAccountNonLocked() {
+        return true;
+    }
+
+    @Override
+    public boolean isCredentialsNonExpired() {
+        return true;
+    }
+
+    @Override
+    public boolean isEnabled() {
+        return true;
+    }
+}
Index: src/main/java/by/redlaw/acocuntsapp/db/entity/Role.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/redlaw/acocuntsapp/db/entity/Role.java b/src/main/java/by/redlaw/acocuntsapp/db/entity/Role.java
new file mode 100644
--- /dev/null	(date 1747074281069)
+++ b/src/main/java/by/redlaw/acocuntsapp/db/entity/Role.java	(date 1747074281069)
@@ -0,0 +1,5 @@
+package by.redlaw.acocuntsapp.db.entity;
+
+public enum Role {
+    ADMIN, USER
+}
Index: src/main/java/by/redlaw/acocuntsapp/AccountsApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/redlaw/acocuntsapp/AccountsApplication.java b/src/main/java/by/redlaw/acocuntsapp/AccountsApplication.java
new file mode 100644
--- /dev/null	(date 1747399902387)
+++ b/src/main/java/by/redlaw/acocuntsapp/AccountsApplication.java	(date 1747399902387)
@@ -0,0 +1,17 @@
+package by.redlaw.acocuntsapp;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.cache.annotation.EnableCaching;
+import org.springframework.scheduling.annotation.EnableScheduling;
+
+@EnableCaching
+@EnableScheduling
+@SpringBootApplication
+public class AccountsApplication {
+
+    public static void main(String[] args) {
+        SpringApplication.run(AccountsApplication.class, args);
+    }
+
+}
Index: src/main/java/by/redlaw/acocuntsapp/db/entity/EmailData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/redlaw/acocuntsapp/db/entity/EmailData.java b/src/main/java/by/redlaw/acocuntsapp/db/entity/EmailData.java
new file mode 100644
--- /dev/null	(date 1747158146273)
+++ b/src/main/java/by/redlaw/acocuntsapp/db/entity/EmailData.java	(date 1747158146273)
@@ -0,0 +1,27 @@
+package by.redlaw.acocuntsapp.db.entity;
+
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import static jakarta.persistence.GenerationType.AUTO;
+import static jakarta.persistence.GenerationType.IDENTITY;
+
+@Entity
+@Table(name = "email_data")
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class EmailData {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+
+    @ManyToOne
+    @JoinColumn(name = "user_id")
+    private User user;
+
+    @Column(unique = true, nullable = false)
+    private String email;
+}
\ No newline at end of file
Index: src/main/java/by/redlaw/acocuntsapp/db/entity/PhoneData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/redlaw/acocuntsapp/db/entity/PhoneData.java b/src/main/java/by/redlaw/acocuntsapp/db/entity/PhoneData.java
new file mode 100644
--- /dev/null	(date 1747158146265)
+++ b/src/main/java/by/redlaw/acocuntsapp/db/entity/PhoneData.java	(date 1747158146265)
@@ -0,0 +1,25 @@
+package by.redlaw.acocuntsapp.db.entity;
+
+
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Entity
+@Table(name = "phone_data")
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class PhoneData {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+
+    @ManyToOne
+    @JoinColumn(name = "user_id")
+    private User user;
+
+    @Column(unique = true, nullable = false, length = 13)
+    private String phone;
+}
\ No newline at end of file
Index: src/main/java/by/redlaw/acocuntsapp/filter/JwtAuthFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/redlaw/acocuntsapp/filter/JwtAuthFilter.java b/src/main/java/by/redlaw/acocuntsapp/filter/JwtAuthFilter.java
new file mode 100644
--- /dev/null	(date 1747159321804)
+++ b/src/main/java/by/redlaw/acocuntsapp/filter/JwtAuthFilter.java	(date 1747159321804)
@@ -0,0 +1,56 @@
+package by.redlaw.acocuntsapp.filter;
+
+import by.redlaw.acocuntsapp.db.entity.User;
+import by.redlaw.acocuntsapp.db.repository.UserRepository;
+import by.redlaw.acocuntsapp.service.JwtService;
+import jakarta.servlet.FilterChain;
+import jakarta.servlet.ServletException;
+import jakarta.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletResponse;
+import lombok.RequiredArgsConstructor;
+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
+import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.security.core.userdetails.UsernameNotFoundException;
+import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
+import org.springframework.stereotype.Component;
+import org.springframework.web.filter.OncePerRequestFilter;
+
+import java.io.IOException;
+import java.util.Collections;
+
+import static org.springframework.http.HttpHeaders.AUTHORIZATION;
+
+
+@Component
+@RequiredArgsConstructor
+public class JwtAuthFilter extends OncePerRequestFilter {
+
+    private final UserRepository userRepository;
+    private final JwtService jwtService;
+
+    @Override
+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
+        final String authHeader = request.getHeader(AUTHORIZATION);
+        final String jwtToken;
+
+        if (authHeader == null || !authHeader.startsWith("Bearer")) {
+            filterChain.doFilter(request, response);
+            return;
+        }
+        jwtToken = authHeader.substring(7);
+        final Long userId = jwtService.extractUserId(jwtToken);
+
+        if (userId != null && SecurityContextHolder.getContext().getAuthentication() == null) {
+            User user = userRepository.findById(userId)
+                    .orElseThrow(() -> new UsernameNotFoundException("User not found"));
+
+            UsernamePasswordAuthenticationToken authToken =
+                    new UsernamePasswordAuthenticationToken(user.getId(), null, Collections.emptyList());
+            authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
+            SecurityContextHolder.getContext().setAuthentication(authToken);
+        }
+
+        filterChain.doFilter(request, response);
+    }
+
+}
Index: src/test/java/by/redlaw/acocuntsapp/unit/AccountServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/by/redlaw/acocuntsapp/unit/AccountServiceTest.java b/src/test/java/by/redlaw/acocuntsapp/unit/AccountServiceTest.java
new file mode 100644
--- /dev/null	(date 1747341052968)
+++ b/src/test/java/by/redlaw/acocuntsapp/unit/AccountServiceTest.java	(date 1747341052968)
@@ -0,0 +1,102 @@
+package by.redlaw.acocuntsapp.unit;
+
+
+import by.redlaw.acocuntsapp.db.entity.Account;
+import by.redlaw.acocuntsapp.db.entity.User;
+import by.redlaw.acocuntsapp.db.repository.AccountRepository;
+import by.redlaw.acocuntsapp.service.AccountService;
+import jakarta.persistence.EntityNotFoundException;
+import org.jetbrains.annotations.NotNull;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
+import org.mockito.InjectMocks;
+import org.mockito.Mock;
+import org.mockito.junit.jupiter.MockitoExtension;
+
+import java.math.BigDecimal;
+import java.util.Optional;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertThrows;
+import static org.mockito.Mockito.*;
+
+@ExtendWith(MockitoExtension.class)
+class AccountServiceTest {
+
+    private static final Long FROM_USER_ID = 1L;
+    private static final Long TO_USER_ID = 2L;
+
+    @Mock
+    private AccountRepository accountRepository;
+
+    @InjectMocks
+    private AccountService accountService;
+
+    @Test
+    void shouldTransferMoneyWithValidValues() {
+        BigDecimal amount = new BigDecimal("100");
+
+        Account fromAccount = createAccount(FROM_USER_ID);
+        fromAccount.setBalance(new BigDecimal("200"));
+
+        Account toAccount = createAccount(TO_USER_ID);
+        toAccount.setBalance(new BigDecimal("50"));
+
+        when(accountRepository.findByUserIdForUpdate(FROM_USER_ID)).thenReturn(Optional.of(fromAccount));
+        when(accountRepository.findByUserIdForUpdate(TO_USER_ID)).thenReturn(Optional.of(toAccount));
+
+        accountService.transferMoney(FROM_USER_ID, TO_USER_ID, amount);
+
+        assertEquals(new BigDecimal("100"), fromAccount.getBalance());
+        assertEquals(new BigDecimal("150"), toAccount.getBalance());
+
+        verify(accountRepository).save(fromAccount);
+        verify(accountRepository).save(toAccount);
+    }
+
+
+    @Test
+    void shouldFailTransferWhenNotEnoughMoney() {
+        BigDecimal amount = new BigDecimal("300");
+
+        Account fromAccount = createAccount(FROM_USER_ID);
+        fromAccount.setBalance(new BigDecimal("200"));
+
+        Account toAccount = createAccount(TO_USER_ID);
+        toAccount.setBalance(new BigDecimal("50"));
+
+        when(accountRepository.findByUserIdForUpdate(FROM_USER_ID)).thenReturn(Optional.of(fromAccount));
+        when(accountRepository.findByUserIdForUpdate(TO_USER_ID)).thenReturn(Optional.of(toAccount));
+
+        assertThrows(IllegalArgumentException.class, () ->
+                accountService.transferMoney(FROM_USER_ID, TO_USER_ID, amount)
+        );
+
+        verify(accountRepository, never()).save(any());
+    }
+
+    @Test
+    void shouldFailTransferForSameUser() {
+        assertThrows(IllegalArgumentException.class, () ->
+                accountService.transferMoney(1L, 1L, new BigDecimal("50"))
+        );
+    }
+
+    @Test
+    void shouldFailTransferWhenAccountNotFound() {
+        when(accountRepository.findByUserIdForUpdate(anyLong()))
+                .thenReturn(Optional.empty());
+
+        assertThrows(EntityNotFoundException.class, () ->
+                accountService.transferMoney(1L, 2L, new BigDecimal("10"))
+        );
+    }
+
+    private static @NotNull Account createAccount(Long fromUserId) {
+        User fromUser = new User();
+        fromUser.setId(fromUserId);
+        Account fromAccount = new Account();
+        fromAccount.setUser(fromUser);
+        return fromAccount;
+    }
+}
\ No newline at end of file
Index: src/main/resources/db/migration/V1__create_tables.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/db/migration/V1__create_tables.sql b/src/main/resources/db/migration/V1__create_tables.sql
new file mode 100644
--- /dev/null	(date 1747478554850)
+++ b/src/main/resources/db/migration/V1__create_tables.sql	(date 1747478554850)
@@ -0,0 +1,45 @@
+CREATE SEQUENCE user_id_seq;
+
+CREATE TABLE users
+(
+    id            BIGINT PRIMARY KEY    DEFAULT nextval('user_id_seq'),
+    name          VARCHAR(500) NOT NULL,
+    date_of_birth DATE         NOT NULL,
+    password      VARCHAR(500) NOT NULL,
+    role          VARCHAR(20)  NOT NULL DEFAULT 'USER',
+    enabled       BOOLEAN      NOT NULL DEFAULT true
+);
+
+CREATE INDEX idx_user_name ON users (name);
+CREATE INDEX idx_user_date_of_birth ON users (date_of_birth);
+
+
+CREATE SEQUENCE email_data_id_seq;
+
+CREATE TABLE email_data
+(
+    id      BIGINT PRIMARY KEY DEFAULT nextval('email_data_id_seq'),
+    user_id BIGINT       NOT NULL REFERENCES users (id),
+    email   VARCHAR(200) NOT NULL UNIQUE
+);
+
+
+
+CREATE SEQUENCE phone_data_id_seq;
+
+CREATE TABLE phone_data
+(
+    id      BIGINT PRIMARY KEY DEFAULT nextval('phone_data_id_seq'),
+    user_id BIGINT      NOT NULL REFERENCES users (id),
+    phone   VARCHAR(13) NOT NULL UNIQUE
+);
+
+CREATE SEQUENCE account_id_seq;
+
+CREATE TABLE account
+(
+    id                    BIGINT PRIMARY KEY DEFAULT nextval('account_id_seq'),
+    user_id               BIGINT         NOT NULL REFERENCES users (id) UNIQUE,
+    balance               NUMERIC(19, 2) NOT NULL CHECK (balance >= 0),
+    initial_balance_limit NUMERIC(19, 2) NOT NULL CHECK (initial_balance_limit >= 0)
+);
\ No newline at end of file
Index: src/main/java/by/redlaw/acocuntsapp/db/repository/EmailDataRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/redlaw/acocuntsapp/db/repository/EmailDataRepository.java b/src/main/java/by/redlaw/acocuntsapp/db/repository/EmailDataRepository.java
new file mode 100644
--- /dev/null	(date 1747402662134)
+++ b/src/main/java/by/redlaw/acocuntsapp/db/repository/EmailDataRepository.java	(date 1747402662134)
@@ -0,0 +1,17 @@
+package by.redlaw.acocuntsapp.db.repository;
+
+import by.redlaw.acocuntsapp.db.entity.EmailData;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+import java.util.Optional;
+
+public interface EmailDataRepository extends JpaRepository<EmailData, Long> {
+
+    Optional<EmailData> findByEmail(String email);
+
+    boolean existsByEmail(String email);
+
+    Optional<EmailData> findByUserIdAndEmail(Long userId, String email);
+
+    long countByUserId(Long userId);
+}
\ No newline at end of file
Index: src/main/java/by/redlaw/acocuntsapp/db/repository/PhoneDataRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/redlaw/acocuntsapp/db/repository/PhoneDataRepository.java b/src/main/java/by/redlaw/acocuntsapp/db/repository/PhoneDataRepository.java
new file mode 100644
--- /dev/null	(date 1747169058145)
+++ b/src/main/java/by/redlaw/acocuntsapp/db/repository/PhoneDataRepository.java	(date 1747169058145)
@@ -0,0 +1,17 @@
+package by.redlaw.acocuntsapp.db.repository;
+
+import by.redlaw.acocuntsapp.db.entity.PhoneData;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+import java.util.Optional;
+
+public interface PhoneDataRepository extends JpaRepository<PhoneData, Long> {
+    Optional<PhoneData> findByPhone(String phone);
+
+    boolean existsByPhone(String phone);
+
+    Optional<PhoneData> findByUserIdAndPhone(Long userId, String phone);
+
+    long countByUserId(Long userId);
+
+}
\ No newline at end of file
Index: src/main/java/by/redlaw/acocuntsapp/config/WebConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/redlaw/acocuntsapp/config/WebConfig.java b/src/main/java/by/redlaw/acocuntsapp/config/WebConfig.java
new file mode 100644
--- /dev/null	(date 1747417018105)
+++ b/src/main/java/by/redlaw/acocuntsapp/config/WebConfig.java	(date 1747417018105)
@@ -0,0 +1,29 @@
+package by.redlaw.acocuntsapp.config;
+
+import com.fasterxml.jackson.databind.SerializationFeature;
+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
+import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;
+import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;
+
+import java.time.LocalDate;
+import java.time.format.DateTimeFormatter;
+
+@Configuration
+public class WebConfig {
+    private static final String DATE_PATTERN = "dd.MM.yyyy";
+
+    @Bean
+    public Jackson2ObjectMapperBuilder jacksonBuilder() {
+        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(DATE_PATTERN);
+        JavaTimeModule module = new JavaTimeModule();
+        module.addSerializer(LocalDate.class, new LocalDateSerializer(formatter));
+        module.addDeserializer(LocalDate.class, new LocalDateDeserializer(formatter));
+
+        return new Jackson2ObjectMapperBuilder()
+                .modules(module)
+                .featuresToDisable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
+    }
+}
Index: src/main/java/by/redlaw/acocuntsapp/controller/AuthenticationController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/redlaw/acocuntsapp/controller/AuthenticationController.java b/src/main/java/by/redlaw/acocuntsapp/controller/AuthenticationController.java
new file mode 100644
--- /dev/null	(date 1747488219669)
+++ b/src/main/java/by/redlaw/acocuntsapp/controller/AuthenticationController.java	(date 1747488219669)
@@ -0,0 +1,42 @@
+package by.redlaw.acocuntsapp.controller;
+
+
+import by.redlaw.accountsapp.api.AuthApi;
+import by.redlaw.accountsapp.dto.AuthenticationRequestDto;
+import by.redlaw.accountsapp.dto.AuthenticationResponseDto;
+import by.redlaw.accountsapp.dto.RegistrationRequestDto;
+import by.redlaw.acocuntsapp.service.AuthenticationService;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.RestController;
+
+@Slf4j
+@RestController
+@RequiredArgsConstructor
+public class AuthenticationController implements AuthApi {
+
+    private final AuthenticationService authenticationService;
+
+    @Override
+    public ResponseEntity<AuthenticationResponseDto> apiAuthLoginPost(AuthenticationRequestDto request) {
+        AuthenticationResponseDto response = authenticationService.login(request);
+        String login = request.getEmail() != null ? request.getEmail() : request.getPhone();
+        log.info("Login successful for user: {}***", login.substring(0, 3));
+        return ResponseEntity.ok(response);
+    }
+
+
+    @Override
+    public ResponseEntity<AuthenticationResponseDto> apiAuthRegisterPost(RegistrationRequestDto request) {
+        if ((request.getEmail() == null && request.getPhone() == null) ||
+            (request.getEmail() != null && request.getPhone() != null)) {
+            throw new IllegalArgumentException("Enter email or phone.");
+        }
+
+        AuthenticationResponseDto response = authenticationService.register(request);
+        return ResponseEntity.ok(response);
+    }
+
+
+}
\ No newline at end of file
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(date 1747518768601)
+++ b/.gitignore	(date 1747518768601)
@@ -0,0 +1,46 @@
+# Compiled Java class files
+*.class
+
+
+# Log files
+logs/
+*.log
+
+# Package files
+*.jar
+
+# Maven
+!.mvn/wrapper/maven-wrapper.jar
+target/
+dist/
+
+# JetBrains IDE
+.idea/
+*.iws
+*.iml
+*.ipr
+/out/
+
+# Unit test reports
+TEST*.xml
+
+
+# Generated by Windows
+Thumbs.db
+
+# Applications
+*.app
+*.exe
+*.war
+*.mvnw
+*.cmd
+
+# Large media files
+*.mp4
+*.tiff
+*.avi
+*.flv
+*.mov
+*.wmv
+
+/logback-spring-custom.xml
Index: src/main/java/by/redlaw/acocuntsapp/db/repository/UserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/redlaw/acocuntsapp/db/repository/UserRepository.java b/src/main/java/by/redlaw/acocuntsapp/db/repository/UserRepository.java
new file mode 100644
--- /dev/null	(date 1747414743575)
+++ b/src/main/java/by/redlaw/acocuntsapp/db/repository/UserRepository.java	(date 1747414743575)
@@ -0,0 +1,11 @@
+package by.redlaw.acocuntsapp.db.repository;
+
+import by.redlaw.acocuntsapp.db.entity.User;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
+
+import java.util.Optional;
+
+public interface UserRepository extends JpaRepository<User, Long>, JpaSpecificationExecutor<User> {
+    Optional<User> findByName(String name);
+}
Index: src/main/java/by/redlaw/acocuntsapp/service/AuthenticationService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/redlaw/acocuntsapp/service/AuthenticationService.java b/src/main/java/by/redlaw/acocuntsapp/service/AuthenticationService.java
new file mode 100644
--- /dev/null	(date 1747488720128)
+++ b/src/main/java/by/redlaw/acocuntsapp/service/AuthenticationService.java	(date 1747488720128)
@@ -0,0 +1,104 @@
+package by.redlaw.acocuntsapp.service;
+
+import by.redlaw.accountsapp.dto.AuthenticationRequestDto;
+import by.redlaw.accountsapp.dto.AuthenticationResponseDto;
+import by.redlaw.accountsapp.dto.RegistrationRequestDto;
+import by.redlaw.acocuntsapp.db.entity.*;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.http.HttpStatus;
+import org.springframework.security.authentication.AuthenticationManager;
+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
+import org.springframework.security.core.Authentication;
+import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.security.crypto.password.PasswordEncoder;
+import org.springframework.stereotype.Service;
+import org.springframework.web.server.ResponseStatusException;
+
+import java.math.BigDecimal;
+import java.util.Optional;
+
+@Slf4j
+@Service
+@RequiredArgsConstructor
+public class AuthenticationService {
+
+    private final AuthenticationManager authenticationManager;
+
+    private final UserDetailsService userDetailsService;
+    private final EmailDataService emailDataService;
+    private final PhoneDataService phoneDataService;
+    private final AccountService accountService;
+    private final JwtService jwtService;
+    private final PasswordEncoder passwordEncoder;
+
+
+    public AuthenticationResponseDto register(RegistrationRequestDto request) {
+        if (request.getEmail() != null && emailDataService.existsByEmail(request.getEmail())) {
+            throw new IllegalArgumentException("User with such email already exist.");
+        }
+
+        if (request.getPhone() != null && phoneDataService.existsByPhone(request.getPhone())) {
+            throw new IllegalArgumentException("User with such phone number already exist.");
+        }
+
+        var user = User.builder()
+                .name(request.getName())
+                .password(passwordEncoder.encode(request.getPassword()))
+                .dateOfBirth(request.getDateOfBirth() != null ? request.getDateOfBirth().toLocalDate() : null)
+                .role(Role.USER)
+                .enabled(true)
+                .build();
+
+        userDetailsService.saveUser(user);
+
+        if (request.getEmail() != null) {
+            emailDataService.save(new EmailData(null, user, request.getEmail()));
+        }
+
+        if (request.getPhone() != null) {
+            phoneDataService.save(new PhoneData(null, user, request.getPhone()));
+        }
+
+        accountService.save(new Account(null, user, BigDecimal.ZERO, BigDecimal.ZERO));
+
+
+        String token = jwtService.generateToken(user.getId());
+
+        return new AuthenticationResponseDto(token);
+    }
+
+    public AuthenticationResponseDto login(AuthenticationRequestDto request) {
+        String login = Optional.ofNullable(request.getEmail()).orElse(request.getPhone());
+        if (login == null) {
+            throw new IllegalArgumentException("Email or phone must be provided");
+        }
+
+        try {
+            authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(login, request.getPassword()));
+
+        } catch (Exception ex) {
+            log.warn("Authentication failed for login: {}", login);
+            throw ex;
+        }
+
+
+        User user = userDetailsService.loadUserByUsername(login);
+
+        String token = jwtService.createToken(user.getId());
+
+        log.info("Token issued for userId={}", user.getId());
+
+        return new AuthenticationResponseDto(token);
+    }
+
+    public Long getCurrentUserId() {
+        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
+        if (authentication == null || !(authentication.getPrincipal() instanceof Long)) {
+
+            throw new ResponseStatusException(HttpStatus.FORBIDDEN, "Access denied");
+        }
+        Long userId = (Long) authentication.getPrincipal();
+        return userId;
+    }
+}
Index: src/main/java/by/redlaw/acocuntsapp/service/JwtService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/redlaw/acocuntsapp/service/JwtService.java b/src/main/java/by/redlaw/acocuntsapp/service/JwtService.java
new file mode 100644
--- /dev/null	(date 1747137357430)
+++ b/src/main/java/by/redlaw/acocuntsapp/service/JwtService.java	(date 1747137357430)
@@ -0,0 +1,71 @@
+package by.redlaw.acocuntsapp.service;
+
+
+import io.jsonwebtoken.Claims;
+import io.jsonwebtoken.Jwts;
+import io.jsonwebtoken.SignatureAlgorithm;
+import io.jsonwebtoken.security.Keys;
+import org.springframework.security.core.userdetails.UserDetails;
+import org.springframework.stereotype.Service;
+
+import java.security.Key;
+import java.util.Date;
+import java.util.function.Function;
+
+@Service
+public class JwtService {
+
+    private static final String JWT_SIGNING_KEY = "super-secure-and-long-jwt-signing-key-256-bit";
+    private final Key key = Keys.hmacShaKeyFor(JWT_SIGNING_KEY.getBytes());
+
+
+    public String extractUsername(String token) {
+        return extractClaim(token, Claims::getSubject);
+    }
+
+    public Date extractExpiration(String token) {
+        return extractClaim(token, Claims::getExpiration);
+    }
+
+    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
+        final Claims claims = extractAllClaims(token);
+        return claimsResolver.apply(claims);
+    }
+
+    private Claims extractAllClaims(String token) {
+        return Jwts.parser().setSigningKey(JWT_SIGNING_KEY).parseClaimsJws(token).getBody();
+    }
+
+    private Boolean isTokenExpired(String token) {
+        return extractExpiration(token).before(new Date());
+    }
+
+    public String generateToken(Long userId) {
+        return createToken(userId);
+    }
+
+    public String createToken(Long userId) {
+        return Jwts.builder()
+                .setSubject(userId.toString())
+                .setIssuedAt(new Date())
+                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 10))
+                .signWith(key, SignatureAlgorithm.HS256)
+                .compact();
+    }
+
+    public Boolean validateToken(String token, UserDetails userDetails) {
+        final String username = extractUsername(token);
+        return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
+    }
+
+    public Long extractUserId(String token) {
+        String subject = Jwts.parserBuilder()
+                .setSigningKey(key)
+                .build()
+                .parseClaimsJws(token)
+                .getBody()
+                .getSubject();
+        return Long.parseLong(subject);
+    }
+
+}
Index: src/main/java/by/redlaw/acocuntsapp/service/UserDetailsService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/redlaw/acocuntsapp/service/UserDetailsService.java b/src/main/java/by/redlaw/acocuntsapp/service/UserDetailsService.java
new file mode 100644
--- /dev/null	(date 1747488639855)
+++ b/src/main/java/by/redlaw/acocuntsapp/service/UserDetailsService.java	(date 1747488639855)
@@ -0,0 +1,176 @@
+package by.redlaw.acocuntsapp.service;
+
+import by.redlaw.accountsapp.dto.UserSearchResponseDto;
+import by.redlaw.acocuntsapp.db.entity.EmailData;
+import by.redlaw.acocuntsapp.db.entity.PhoneData;
+import by.redlaw.acocuntsapp.db.entity.User;
+import by.redlaw.acocuntsapp.db.repository.UserRepository;
+import by.redlaw.acocuntsapp.db.repository.spec.UserSpecifications;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.cache.annotation.CacheEvict;
+import org.springframework.cache.annotation.Cacheable;
+import org.springframework.data.domain.Page;
+import org.springframework.data.domain.Pageable;
+import org.springframework.data.jpa.domain.Specification;
+import org.springframework.http.HttpStatus;
+import org.springframework.security.core.userdetails.UsernameNotFoundException;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+import org.springframework.web.server.ResponseStatusException;
+
+import java.time.LocalDate;
+import java.util.List;
+
+@Slf4j
+@Service
+@RequiredArgsConstructor
+@Transactional
+public class UserDetailsService implements org.springframework.security.core.userdetails.UserDetailsService {
+
+    private final UserRepository userRepository;
+    private final EmailDataService emailDataService;
+    private final PhoneDataService phoneDataService;
+
+
+    @Override
+    public User loadUserByUsername(String username) throws UsernameNotFoundException {
+        User user;
+        if (username.contains("@")) {
+            user = emailDataService.findByEmail(username)
+                    .map(EmailData::getUser)
+                    .orElseThrow(() -> new UsernameNotFoundException("User not found by email: " + username));
+
+        } else {
+            user = phoneDataService.findByPhone(username)
+                    .map(PhoneData::getUser)
+                    .orElseThrow(() -> new UsernameNotFoundException("User not found by phone: " + username));
+        }
+        return user;
+
+    }
+
+    @Cacheable(
+            cacheNames = "userSearchCache",
+            key = "#name + '_' + #email + '_' + #phone + '_' + #dateOfBirth + '_' + #pageable.pageNumber + '_' + #pageable.pageSize",
+            unless = "#result == null"
+    )
+    public Page<UserSearchResponseDto> searchUsers(String name, String phone, String email, LocalDate dateOfBirth,
+                                                   Pageable pageable) {
+        Specification<User> spec = UserSpecifications.withFilters(name, dateOfBirth, email, phone);
+        Page<User> usersPage = userRepository.findAll(spec, pageable);
+
+
+        log.debug("User search: name={}, page={}, size={}", name, pageable.getPageNumber(), pageable.getPageSize());
+
+        return usersPage.map(user -> {
+            List<String> emails = user.getEmails().stream()
+                    .map(EmailData::getEmail)
+                    .toList();
+
+            List<String> phones = user.getPhones().stream()
+                    .map(PhoneData::getPhone)
+                    .toList();
+
+            UserSearchResponseDto dto = new UserSearchResponseDto();
+            dto.setId(user.getId());
+            dto.setName(user.getName());
+            dto.setDateOfBirth(user.getDateOfBirth().atStartOfDay());
+            dto.setEmails(emails);
+            dto.setPhones(phones);
+            return dto;
+        });
+    }
+
+
+    @CacheEvict(cacheNames = "userSearchCache", allEntries = true)
+    public User saveUser(User user) {
+        return userRepository.save(user);
+    }
+
+    @CacheEvict(cacheNames = "userSearchCache", allEntries = true)
+    public EmailData addEmail(Long userId, String email) {
+        if (emailDataService.existsByEmail(email)) {
+            throw new ResponseStatusException(HttpStatus.CONFLICT, "Email already in use");
+        }
+
+        User user = userRepository.findById(userId)
+                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found"));
+
+        EmailData emailData = new EmailData();
+        emailData.setUser(user);
+        emailData.setEmail(email);
+        emailDataService.save(emailData);
+
+        return emailData;
+    }
+
+    @CacheEvict(cacheNames = "userSearchCache", allEntries = true)
+    public EmailData updateEmail(Long userId, String oldEmail, String newEmail) {
+        if (emailDataService.existsByEmail(newEmail)) {
+            throw new ResponseStatusException(HttpStatus.CONFLICT, "New email already in use");
+        }
+
+        EmailData emailData = emailDataService.findByUserIdAndEmail(userId, oldEmail)
+                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Old email not found"));
+
+        emailData.setEmail(newEmail);
+        emailDataService.save(emailData);
+        return emailData;
+    }
+
+    @CacheEvict(cacheNames = "userSearchCache", allEntries = true)
+    public void deleteEmail(Long userId, String email) {
+        EmailData emailData = emailDataService.findByUserIdAndEmail(userId, email)
+                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Email not found"));
+
+        if (emailDataService.countByUserId(userId) <= 1) {
+            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "At least one email must remain in DB");
+        }
+
+        emailDataService.delete(emailData);
+    }
+
+    @CacheEvict(cacheNames = "userSearchCache", allEntries = true)
+    public PhoneData addPhone(Long userId, String phone) {
+        if (phoneDataService.existsByPhone(phone)) {
+            throw new ResponseStatusException(HttpStatus.CONFLICT, "Phone already in use");
+        }
+
+        User user = userRepository.findById(userId)
+                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found"));
+
+        PhoneData phoneData = new PhoneData();
+        phoneData.setUser(user);
+        phoneData.setPhone(phone);
+        phoneDataService.save(phoneData);
+        return phoneData;
+    }
+
+    @CacheEvict(cacheNames = "userSearchCache", allEntries = true)
+    public PhoneData updatePhone(Long userId, String oldPhone, String newPhone) {
+        if (phoneDataService.existsByPhone(newPhone)) {
+            throw new ResponseStatusException(HttpStatus.CONFLICT, "New phone already in use");
+        }
+
+        PhoneData phoneData = phoneDataService.findByUserIdAndPhone(userId, oldPhone)
+                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Old phone not found"));
+
+        phoneData.setPhone(newPhone);
+        phoneDataService.save(phoneData);
+        return phoneData;
+    }
+
+    @CacheEvict(cacheNames = "userSearchCache", allEntries = true)
+    public void deletePhone(Long userId, String phone) {
+        PhoneData phoneData = phoneDataService.findByUserIdAndPhone(userId, phone)
+                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Phone not found"));
+
+        if (phoneDataService.countByUserId(userId) <= 1) {
+            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "At least one phone must remain in DB");
+        }
+
+        phoneDataService.delete(phoneData);
+    }
+
+}
\ No newline at end of file
Index: docker-compose.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/docker-compose.yml b/docker-compose.yml
new file mode 100644
--- /dev/null	(date 1747072664294)
+++ b/docker-compose.yml	(date 1747072664294)
@@ -0,0 +1,28 @@
+version: '3.1'
+
+services:
+  be-postgres:
+    container_name: be-postgres
+    image: postgres:13-alpine
+    restart: always
+    ports:
+      - "5432:5432"
+    environment:
+      POSTGRES_USER: postgres
+      POSTGRES_PASSWORD: password
+      POSTGRES_DB: test
+      TZ: 'GMT+3'
+      PGTZ: 'GMT+3'
+
+  backend:
+    build: .
+    container_name: be-accounts
+    ports:
+      - "8080:8080"
+    environment:
+      SPRING_PROFILES_ACTIVE: dev
+      SPRING_DATASOURCE_URL: jdbc:postgresql://be-postgres:5432/test
+      SPRING_DATASOURCE_USERNAME: postgres
+      SPRING_DATASOURCE_PASSWORD: password
+    depends_on:
+      - be-postgres
\ No newline at end of file
Index: src/test/resources/application-test.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/application-test.yml b/src/test/resources/application-test.yml
new file mode 100644
--- /dev/null	(date 1747328113735)
+++ b/src/test/resources/application-test.yml	(date 1747328113735)
@@ -0,0 +1,15 @@
+spring:
+  datasource:
+    driver-class-name: org.testcontainers.jdbc.ContainerDatabaseDriver
+    url: jdbc:tc:postgresql:14:///testdb
+    username: test
+    password: test
+  jpa:
+    hibernate:
+      ddl-auto: validate
+    show-sql: true
+    properties:
+      hibernate:
+        dialect: org.hibernate.dialect.PostgreSQLDialect
+  flyway:
+    enabled: true
\ No newline at end of file
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
new file mode 100644
--- /dev/null	(date 1747399807365)
+++ b/pom.xml	(date 1747399807365)
@@ -0,0 +1,208 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+    <parent>
+        <groupId>org.springframework.boot</groupId>
+        <artifactId>spring-boot-starter-parent</artifactId>
+        <version>3.1.6</version>
+        <relativePath/> <!-- lookup parent from repository -->
+    </parent>
+    <groupId>by.redlaw.accountsapp</groupId>
+    <artifactId>accounts-app</artifactId>
+    <version>0.0.1-SNAPSHOT</version>
+    <name>accounts-app</name>
+    <description>Demo project</description>
+    <properties>
+        <java.version>17</java.version>
+    </properties>
+    <dependencies>
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-web</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-data-jpa</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-security</artifactId>
+            <version>3.1.6</version>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-cache</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.springdoc</groupId>
+            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
+            <version>2.6.0</version>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-test</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-validation</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>org.postgresql</groupId>
+            <artifactId>postgresql</artifactId>
+            <scope>runtime</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.flywaydb</groupId>
+            <artifactId>flyway-core</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>javax.servlet</groupId>
+            <artifactId>javax.servlet-api</artifactId>
+            <version>4.0.1</version>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.openapitools</groupId>
+            <artifactId>jackson-databind-nullable</artifactId>
+            <version>0.2.6</version>
+        </dependency>
+        <dependency>
+            <groupId>javax.annotation</groupId>
+            <artifactId>javax.annotation-api</artifactId>
+            <version>1.3.2</version>
+        </dependency>
+        <dependency>
+            <groupId>javax.xml.bind</groupId>
+            <artifactId>jaxb-api</artifactId>
+            <version>2.3.1</version>
+        </dependency>
+
+        <dependency>
+            <groupId>io.jsonwebtoken</groupId>
+            <artifactId>jjwt-api</artifactId>
+            <version>0.11.5</version>
+        </dependency>
+        <dependency>
+            <groupId>io.jsonwebtoken</groupId>
+            <artifactId>jjwt-impl</artifactId>
+            <version>0.11.5</version>
+            <scope>runtime</scope>
+        </dependency>
+        <dependency>
+            <groupId>io.jsonwebtoken</groupId>
+            <artifactId>jjwt-jackson</artifactId>
+            <version>0.11.5</version>
+            <scope>runtime</scope>
+        </dependency>
+
+        <dependency>
+            <groupId>com.github.ben-manes.caffeine</groupId>
+            <artifactId>caffeine</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+            <optional>true</optional>
+        </dependency>
+
+        <dependency>
+            <groupId>org.testcontainers</groupId>
+            <artifactId>postgresql</artifactId>
+            <version>1.20.4</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.testcontainers</groupId>
+            <artifactId>junit-jupiter</artifactId>
+            <version>1.20.4</version>
+            <scope>test</scope>
+        </dependency>
+
+    </dependencies>
+
+    <build>
+        <plugins>
+
+            <plugin>
+                <groupId>org.openapitools</groupId>
+                <artifactId>openapi-generator-maven-plugin</artifactId>
+                <version>7.4.0</version>
+                <executions>
+                    <execution>
+                        <goals>
+                            <goal>generate</goal>
+                        </goals>
+                        <configuration>
+                            <inputSpec>${project.basedir}/src/main/resources/accounts-app-api.yml</inputSpec>
+                            <generatorName>spring</generatorName>
+                            <output>${project.build.directory}/generated-sources/openapi</output>
+                            <apiPackage>by.redlaw.accountsapp.api</apiPackage>
+                            <modelPackage>by.redlaw.accountsapp.dto</modelPackage>
+                            <modelNameSuffix>Dto</modelNameSuffix>
+                            <configOptions>
+                                <interfaceOnly>true</interfaceOnly>
+                                <useTags>true</useTags>
+                                <useBeanValidation>true</useBeanValidation>
+                                <dateLibrary>java11</dateLibrary>
+                                <useJakartaEe>true</useJakartaEe>
+                                <nullValueHandling>AS_EMPTY</nullValueHandling>
+                                <nullableReferenceTypes>false</nullableReferenceTypes>
+                                <useOptional>false</useOptional>
+                                <openApiNullable>false</openApiNullable>
+                                <dateLibrary>java11-localdatetime</dateLibrary>
+                            </configOptions>
+                            <importMappings>
+                                <importMapping>Date=java.time.LocalDateTime</importMapping>
+                            </importMappings>
+                            <typeMappings>
+                                <typeMapping>Date=LocalDateTime</typeMapping>
+                            </typeMappings>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+
+            <plugin>
+                <groupId>org.codehaus.mojo</groupId>
+                <artifactId>build-helper-maven-plugin</artifactId>
+                <version>3.6.0</version>
+                <executions>
+                    <execution>
+                        <id>add-source</id>
+                        <phase>generate-sources</phase>
+                        <goals>
+                            <goal>add-source</goal>
+                        </goals>
+                        <configuration>
+                            <sources>
+                                <source>${project.build.directory}/generated-sources/openapi/src/main/java</source>
+                            </sources>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+
+            <plugin>
+                <groupId>org.springframework.boot</groupId>
+                <artifactId>spring-boot-maven-plugin</artifactId>
+                <configuration>
+                    <image>
+                        <builder>paketobuildpacks/builder-jammy-base:latest</builder>
+                    </image>
+                    <excludes>
+                        <exclude>
+                            <groupId>org.projectlombok</groupId>
+                            <artifactId>lombok</artifactId>
+                        </exclude>
+                    </excludes>
+                </configuration>
+            </plugin>
+        </plugins>
+    </build>
+
+</project>
Index: src/main/java/by/redlaw/acocuntsapp/controller/AccountController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/redlaw/acocuntsapp/controller/AccountController.java b/src/main/java/by/redlaw/acocuntsapp/controller/AccountController.java
new file mode 100644
--- /dev/null	(date 1747488940116)
+++ b/src/main/java/by/redlaw/acocuntsapp/controller/AccountController.java	(date 1747488940116)
@@ -0,0 +1,29 @@
+package by.redlaw.acocuntsapp.controller;
+
+import by.redlaw.accountsapp.api.AccountApi;
+import by.redlaw.accountsapp.dto.MoneyTransferRequestDto;
+import by.redlaw.acocuntsapp.service.AccountService;
+import by.redlaw.acocuntsapp.service.AuthenticationService;
+import jakarta.validation.Valid;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RestController;
+
+@Slf4j
+@RestController
+@RequiredArgsConstructor
+public class AccountController implements AccountApi {
+
+    private final AccountService accountService;
+    private final AuthenticationService authenticationService;
+
+
+    @Override
+    public ResponseEntity<Void> accountsTransferPost(@RequestBody @Valid MoneyTransferRequestDto request) {
+        Long fromUserId = authenticationService.getCurrentUserId();
+        accountService.transferMoney(fromUserId, request.getToUserId(), request.getAmount());
+        return ResponseEntity.ok().build();
+    }
+}
Index: src/test/java/by/redlaw/acocuntsapp/integration/AccountsApplicationIntegrationTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/by/redlaw/acocuntsapp/integration/AccountsApplicationIntegrationTests.java b/src/test/java/by/redlaw/acocuntsapp/integration/AccountsApplicationIntegrationTests.java
new file mode 100644
--- /dev/null	(date 1747517777038)
+++ b/src/test/java/by/redlaw/acocuntsapp/integration/AccountsApplicationIntegrationTests.java	(date 1747517777038)
@@ -0,0 +1,84 @@
+package by.redlaw.acocuntsapp.integration;
+
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.test.context.ActiveProfiles;
+import org.springframework.test.web.servlet.MockMvc;
+import org.testcontainers.junit.jupiter.Testcontainers;
+
+import static org.hamcrest.Matchers.containsString;
+import static org.hamcrest.Matchers.lessThanOrEqualTo;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
+
+@Testcontainers
+@SpringBootTest
+@AutoConfigureMockMvc
+@ActiveProfiles("test")
+class AccountsApplicationIntegrationTests {
+
+    @Autowired
+    private MockMvc mockMvc;
+
+
+    @BeforeEach
+    void setUp() {
+
+    }
+
+    @Test
+    void shouldFindUserByPhone() throws Exception {
+        mockMvc.perform(get("/api/user/search")
+                        .param("phone", "79201111111"))
+
+                .andExpect(status().isOk())
+                .andExpect(content().string(containsString("79201111111")));
+    }
+
+    @Test
+    void shouldFindUserByDateOfBirth() throws Exception {
+        mockMvc.perform(get("/api/user/search")
+                        .param("dateOfBirth", "1990-01-01T00:00:00"))
+                .andExpect(status().isOk());
+    }
+
+    @Test
+    void shouldFindUserByName() throws Exception {
+        mockMvc.perform(get("/api/user/search")
+                        .param("name", "Ivan"))
+                .andExpect(status().isOk())
+                .andExpect(content().string(containsString("Ivan Petrov")));
+    }
+
+    @Test
+    void shouldFindUserByEmail() throws Exception {
+        mockMvc.perform(get("/api/user/search")
+                        .param("email", "ivan.petrov@example.com"))
+                .andExpect(status().isOk())
+                .andExpect(content().string(containsString("ivan.petrov@example.com")));
+    }
+
+    @Test
+    void shouldReturnAllUsersWithoutFilters() throws Exception {
+        mockMvc.perform(get("/api/user/search")
+                        .param("page", "0")
+                        .param("size", "10"))
+                .andExpect(status().isOk())
+                .andExpect(jsonPath("$.content").isArray())
+                .andExpect(jsonPath("$.content.length()").value(lessThanOrEqualTo(10)))
+                .andExpect(jsonPath("$.totalElements").isNumber());
+    }
+
+    @Test
+    void shouldReturnEmptyResultWhenUserNotFound() throws Exception {
+        mockMvc.perform(get("/api/user/search")
+                        .param("name", "NotExists")
+                )
+                .andExpect(status().isOk())
+                .andExpect(jsonPath("$.content").isArray())
+                .andExpect(jsonPath("$.content.length()").value(lessThanOrEqualTo(0)));
+    }
+}
Index: http/user_search.http
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/http/user_search.http b/http/user_search.http
new file mode 100644
--- /dev/null	(date 1747517760071)
+++ b/http/user_search.http	(date 1747517760071)
@@ -0,0 +1,19 @@
+### Поиск по имени и email (name=Ivan, email=ivan.petrov@example.com)
+GET http://localhost:8080/api/user/search?name=Ivan&email=ivan.petrov%40example.com&page=0&size=5
+Accept: application/json
+
+### Поиск по телефону (phone=+375299999999)
+GET http://localhost:8080/api/user/search?phone=79209999999
+Accept: application/json
+
+### Поиск по дате рождения (все, кто младше 01-01-1990)
+GET http://localhost:8080/api/user/search?dateOfBirth=1990-01-01T00:00:00
+Accept: application/json
+
+### Поиск по имени с дефисом (например, Oleg Smirnov)
+GET http://localhost:8080/api/user/search?name=Oleg%20Smirnov
+Accept: application/json
+
+### Без фильтров — просто все пользователи по странице
+GET http://localhost:8080/api/user/search?page=0&size=10
+Accept: application/json
\ No newline at end of file
Index: http/money_transfer.http
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/http/money_transfer.http b/http/money_transfer.http
new file mode 100644
--- /dev/null	(date 1747488109128)
+++ b/http/money_transfer.http	(date 1747488109128)
@@ -0,0 +1,9 @@
+### Перевод денег от одного пользователя к другому
+POST http://localhost:8080/accounts/transfer
+Content-Type: application/json
+Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwiaWF0IjoxNzQ3NDg4MDk3LCJleHAiOjE3NDc1MjQwOTd9.hgz-9x_4NK62Qpu-Q-HXthN9smHo0yb_eNNQiPjMT70
+
+{
+  "toUserId": 2,
+  "amount": 50
+}
\ No newline at end of file
Index: src/main/resources/application-dev.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/application-dev.yml b/src/main/resources/application-dev.yml
new file mode 100644
--- /dev/null	(date 1747484729618)
+++ b/src/main/resources/application-dev.yml	(date 1747484729618)
@@ -0,0 +1,46 @@
+  spring:
+
+    config:
+      activate:
+        on-profile: dev
+
+    datasource:
+      url: jdbc:postgresql://localhost:5432/test
+      username: postgres
+      password: password
+      driver-class-name: org.postgresql.Driver
+
+    jpa:
+      hibernate:
+        ddl-auto: update
+      show-sql: false
+      properties:
+        hibernate.globally_quoted_identifiers: true
+        hibernate:
+          format_sql: true
+      database: postgresql
+      database-platform: org.hibernate.dialect.PostgreSQLDialect
+
+    flyway:
+      enabled: true
+      locations: classpath:db/migration
+
+    springdoc:
+      swagger-ui:
+        path:
+        url: /v3/api-docs
+        config-url: /v3/api-docs/swagger-config
+      api-docs:
+        enabled: false
+
+    jackson:
+      serialization:
+        write-dates-as-timestamps: false
+      date-format: dd.MM.yyyy
+
+    caffeine-cache:
+      caches:
+        userSearchCache:
+          ttl: 5m
+          accessTtl: 5m
+          max-size: 1000
\ No newline at end of file
Index: src/main/java/by/redlaw/acocuntsapp/service/EmailDataService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/redlaw/acocuntsapp/service/EmailDataService.java b/src/main/java/by/redlaw/acocuntsapp/service/EmailDataService.java
new file mode 100644
--- /dev/null	(date 1747402887536)
+++ b/src/main/java/by/redlaw/acocuntsapp/service/EmailDataService.java	(date 1747402887536)
@@ -0,0 +1,40 @@
+package by.redlaw.acocuntsapp.service;
+
+import by.redlaw.acocuntsapp.db.entity.EmailData;
+import by.redlaw.acocuntsapp.db.repository.EmailDataRepository;
+import lombok.RequiredArgsConstructor;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.util.Optional;
+
+@Service
+@RequiredArgsConstructor
+@Transactional
+public class EmailDataService {
+    private final EmailDataRepository emailDataRepository;
+
+    public boolean existsByEmail(String email) {
+        return emailDataRepository.existsByEmail(email);
+    }
+
+    public Optional<EmailData> findByUserIdAndEmail(Long userId, String email) {
+        return emailDataRepository.findByUserIdAndEmail(userId, email);
+    }
+
+    public Optional<EmailData> findByEmail(String email) {
+        return emailDataRepository.findByEmail(email);
+    }
+
+    public void save(EmailData emailData) {
+        emailDataRepository.save(emailData);
+    }
+
+    public void delete(EmailData emailData) {
+        emailDataRepository.delete(emailData);
+    }
+
+    public long countByUserId(Long userId) {
+        return emailDataRepository.countByUserId(userId);
+    }
+}
Index: src/main/java/by/redlaw/acocuntsapp/service/PhoneDataService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/redlaw/acocuntsapp/service/PhoneDataService.java b/src/main/java/by/redlaw/acocuntsapp/service/PhoneDataService.java
new file mode 100644
--- /dev/null	(date 1747169156598)
+++ b/src/main/java/by/redlaw/acocuntsapp/service/PhoneDataService.java	(date 1747169156598)
@@ -0,0 +1,38 @@
+package by.redlaw.acocuntsapp.service;
+
+import by.redlaw.acocuntsapp.db.entity.PhoneData;
+import by.redlaw.acocuntsapp.db.repository.PhoneDataRepository;
+import lombok.RequiredArgsConstructor;
+import org.springframework.stereotype.Service;
+
+import java.util.Optional;
+
+@Service
+@RequiredArgsConstructor
+public class PhoneDataService {
+    private final PhoneDataRepository phoneDataRepository;
+
+    public boolean existsByPhone(String phone) {
+        return phoneDataRepository.existsByPhone(phone);
+    }
+
+    public Optional<PhoneData> findByPhone(String phone) {
+        return phoneDataRepository.findByPhone(phone);
+    }
+
+    public Optional<PhoneData> findByUserIdAndPhone(Long userId, String phone) {
+        return phoneDataRepository.findByUserIdAndPhone(userId, phone);
+    }
+
+    public void save(PhoneData phoneData) {
+        phoneDataRepository.save(phoneData);
+    }
+
+    public void delete(PhoneData phoneData) {
+        phoneDataRepository.delete(phoneData);
+    }
+
+    public long countByUserId(Long userId) {
+        return phoneDataRepository.countByUserId(userId);
+    }
+}
Index: src/main/java/by/redlaw/acocuntsapp/exception/GlobalExceptionHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/redlaw/acocuntsapp/exception/GlobalExceptionHandler.java b/src/main/java/by/redlaw/acocuntsapp/exception/GlobalExceptionHandler.java
new file mode 100644
--- /dev/null	(date 1747316643427)
+++ b/src/main/java/by/redlaw/acocuntsapp/exception/GlobalExceptionHandler.java	(date 1747316643427)
@@ -0,0 +1,57 @@
+package by.redlaw.acocuntsapp.exception;
+
+import jakarta.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletResponse;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.MethodArgumentNotValidException;
+import org.springframework.web.bind.annotation.ExceptionHandler;
+import org.springframework.web.bind.annotation.RestControllerAdvice;
+import org.springframework.web.server.ResponseStatusException;
+
+import java.time.LocalDateTime;
+
+@RestControllerAdvice
+public class GlobalExceptionHandler {
+
+    @ExceptionHandler(ResponseStatusException.class)
+    public ResponseEntity<?> handleResponseStatusException(HttpServletRequest req, ResponseStatusException ex) {
+        return build(getApiError(ex, (HttpStatus) ex.getStatusCode(), req));
+    }
+
+    @ExceptionHandler(IllegalArgumentException.class)
+    public ResponseEntity<?> handleIllegalArgumentException(HttpServletRequest req, HttpServletResponse res,
+                                                            IllegalArgumentException ex) {
+        return build(getApiError(ex, HttpStatus.BAD_REQUEST, req));
+    }
+
+    @ExceptionHandler(MethodArgumentNotValidException.class)
+    public ResponseEntity<?> handleValidation(HttpServletRequest req, MethodArgumentNotValidException ex) {
+        ApiError error = getApiError(ex, HttpStatus.BAD_REQUEST, req);
+        error.setMessage("Validation failed");
+        error.setErrors(ex.getBindingResult().getFieldErrors().stream()
+                .map(field -> field.getField() + ": " + field.getDefaultMessage())
+                .toList());
+
+        return build(error);
+    }
+
+    @ExceptionHandler(Exception.class)
+    public ResponseEntity<?> handleUnhandled(HttpServletRequest req, Exception ex) {
+        return build(getApiError(ex, HttpStatus.INTERNAL_SERVER_ERROR, req));
+    }
+
+    private ApiError getApiError(Exception ex, HttpStatus status, HttpServletRequest req) {
+        return ApiError.builder()
+                .timestamp(LocalDateTime.now())
+                .status(status.value())
+                .error(status)
+                .message(ex.getMessage())
+                .path(req.getServletPath())
+                .build();
+    }
+
+    private ResponseEntity<Object> build(ApiError apiError) {
+        return new ResponseEntity<>(apiError, apiError.getError());
+    }
+}
\ No newline at end of file
Index: src/main/java/by/redlaw/acocuntsapp/exception/ApiError.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/redlaw/acocuntsapp/exception/ApiError.java b/src/main/java/by/redlaw/acocuntsapp/exception/ApiError.java
new file mode 100644
--- /dev/null	(date 1747172185601)
+++ b/src/main/java/by/redlaw/acocuntsapp/exception/ApiError.java	(date 1747172185601)
@@ -0,0 +1,24 @@
+package by.redlaw.acocuntsapp.exception;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import org.springframework.http.HttpStatus;
+
+import java.time.LocalDateTime;
+import java.util.List;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+@Builder
+public class ApiError {
+    private LocalDateTime timestamp;
+    private int status;
+    private HttpStatus error;
+    private String message;
+    private String path;
+    private List<String> errors;
+
+}
\ No newline at end of file
diff --git a/README.md b/README.md
new file mode 100644
index 0000000000000000000000000000000000000000..dccd40f86b4430b58137f9d8d00e5eb48d99f867
GIT binary patch
literal 1299
zc${ri%Wm3G5Zxp34<oTGhAgA(+GZ1}QmaP&0Arhn3N{KxX?8%Av=S+F(N%ZtrdwVv
z#=L&v-aqP@xrRWgkc{Vj&dh;aE=Sj)eG^hx^~kkDyJWXKYPV{Bh1|gT=-rSLG@3!n
z%Vv&kvdU?Om3l0<WCecxu5j0=Q@cr)o6Tf1IgEJKuGQT<wPcd*yLbzl$0J`*$wo88
z>}K<1R*4&sW%+^S*iQ8nOgio#uN&O@jKQE#KUAc@s91N@MorX6tyQcdf*HYB!kDLl
zB{_t=uG+$})KB|>RHzj>cDd};d@oPBm!>3YLux`OiqLVw<!mewjtZoHp*kUC$yX$i
z_++;3^BCRJPuz=psx>SIyu^n)kMskke&x9YJR=mad(Csip*#9sX!Z#B1q|9QVBj@I
zzehZ`bp7_t)ny^w%r}9~V3_foi`9nH^-w=ZSAIkc$V7A>{@3q6ToUrPDX_;~J}+u5
zsp14tu4X_JX}`krk7RU_6B}sUhj%XY3;Uz}L{1;v6N6#IOXX8c@xfT;xRGsw{T%)+
z*mq5~A-t4f5#LS^sTzjOi(;`JICi}nw8D$?v-7iJ>(;JRpyYO~So2-)Q=u9*>bc?`
z#CM!{$hVFR;zJ1`@bcXiJ(D_;4zg46n5$0B2IVGu#2wj0pI8P=2tF`~1?+)-f19Hp
z3>wR7%nPX*0%K7`%)>6yGDb2J#A7+)|0Hj~A%hQzJO-KQdqX7wk%9hfcBmG4GQ&kN
zBfv>ml+WAQ$d#v@!t`dlHRa7kB6wsua>S7y<fWA;8b7U_QbZeqdSSH3;2xL?Fsydc
jDI9Q2M3&~agXjQT5rW*XYl#k~a0so`IQ}b8E42FyP`vgP

